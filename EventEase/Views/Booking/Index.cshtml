@model IEnumerable<EventEase.Models.Booking>

@{
    ViewData["Title"] = "EventEase Booking - Bookings";
}

<style>
    .badge {
        padding: 0.25em 0.4em;
        font-size: 75%;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
        color: white;
    }

    .badge-success {
        background-color: #28a745;
    }

    .badge-warning {
        background-color: #ffc107;
    }

    .badge-danger {
        background-color: #dc3545;
    }

    .badge-primary {
        background-color: #007bff;
    }

    .badge-secondary {
        background-color: #6c757d;
    }
</style>

<h1>Bookings</h1>

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">@TempData["Message"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

<div class="card mb-4">
    <div class="card-header">
        <h5>Search Bookings</h5>
    </div>
    <div class="card-body">
        <form asp-action="Search" method="get">
            <div class="input-group">
                <input type="text" name="searchTerm" class="form-control" placeholder="Search by Booking ID or Event Name" />
                <div class="input-group-append">
                    <button type="submit" class="btn btn-primary">Search</button>
                    <a asp-action="Index" class="btn btn-secondary">Reset</a>
                </div>
            </div>
        </form>
    </div>
</div>

<table class="table table-striped table-bordered">
    <thead class="thead-dark">
        <tr>
            <th>Booking ID</th>
            <th>Event</th>
            <th>Venue</th>
            <th>Event Date</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.BookingId</td>
                <td>@item.Event?.EventName</td>
                <td>@item.Venue?.VenueName</td>
                <td>@item.BookingDate.ToString("MMMM dd, yyyy")</td>
                <td>
                    @if (string.IsNullOrEmpty(item.Status))
                    {
                        <span class="badge badge-warning">Pending</span>
                    }
                    else
                    {
                        <span class="badge @GetStatusBadgeClass(item.Status)">@item.Status</span>
                    }
                </td>
                <td>
                    <div class="btn-group">
                        <a asp-action="Details" asp-route-id="@item.BookingId" class="btn btn-sm btn-info">Details</a>
                        <a asp-action="Edit" asp-route-id="@item.BookingId" class="btn btn-sm btn-warning">Edit</a>
                        <a asp-action="Delete" asp-route-id="@item.BookingId" class="btn btn-sm btn-danger">Delete</a>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<p>
    <a asp-action="Create" class="btn btn-success">Create New Booking</a>
</p>

@functions {
    string GetStatusBadgeClass(string status)
    {
        switch (status.ToLower())
        {
            case "active":
                return "badge-success";
            case "cancelled":
                return "badge-danger";
            case "completed":
                return "badge-primary";
            default:
                return "badge-secondary";
        }
    }
}